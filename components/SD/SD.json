{
    "Parts": [
        {
            "name": "SD",
            "symbol": {
                "ref": "circuito_Micro SD Card Memory Shield Module.svg"
            },
            "displayName": "Micro SD Card Memory Shield Module",
            "category": [
                "output"
            ],
            "desc": "",
            "bom": [
                {
                    "name": "octopart",
                    "image": "1671987.png",
                    "link": "https://octopart.com/zc343900-yks-80298041?r=sp&s=l2-NMpnETnOXYXF96kQVsg",
                    "price": "0.74",
                    "SKU": ""
                }
            ],
            "info": {
                "setup": "",
                "test": ""
            },
            "placing": {
                "onBreadboard": true
            }
        }
    ],
    "Blocks": [
        {
            "name": "SD",
            "path": "SD",
            "category": "output",
            "blockId": "1671987",
            "app": {
                "appName": "Micro SD module",
                "numericName": "",
                "shortName": "Micro SD ",
                "tags": [
                    "outputs"
                ],
                "indicators": {
                    "verified": "true",
                    "code": "true",
                    "solder": "false"
                },
                "desc": "<p>Enables transferring data to and from a standard micro SD card.</p>\n<p><strong>Sample Applications</strong>: <a target=\"_blank\" href=\"https://edwardmallon.wordpress.com/2015/12/22/arduino-uno-based-data-logger-with-no-soldering/\">Data Logger</a></p>\n",
                "visible": false
            },
            "coders": [
                "SD"
            ],
            "supportedControllers": [
                "ATMega328P",
                "Arduino101",
                "ArduinoLeonardo",
                "ArduinoMega",
                "ArduinoMicro",
                "ArduinoNano",
                "ArduinoProMini3v3",
                "ArduinoProMini5v",
                "ArduinoUno",
                "ESP32DevKitC",
                "NodeMCU"
            ],
            "circuit": {
                "parts": [
                    {
                        "name": "this",
                        "part": "SD"
                    },
                    {
                        "name": "r1",
                        "part": "Resistor",
                        "properties": "330"
                    }
                ],
                "wires": [
                    {
                        "from": "this.MISO",
                        "to": "r1.con1"
                    },
                    {
                        "from": "r1.con0",
                        "to": "MISOR"
                    }
                ],
                "ports": [
                    {
                        "name": "CS",
                        "interface": {
                            "requires":[[0,["5v","SS"]],[1,["3.3v","SS"]]],
                            "unique": true
                        }
                    },
                    {
                        "name": "VCC",
                        "interface": {
                            "requires":[[1,["5v"]],[2,["3.3v"]]]
                        }
                    },
                    {
                        "name": "SCK",
                        "interface": {
                            "isBus": true,
                            "requires":[[0,["5v","SCK"]],[1,["3.3v","SCK"]]]
                        }
                    },
                    {
                        "name": "GND",
                        "interface": {
                            "requires":[[0,["GND"]]]
                        }
                    },
                    {
                        "name": "MOSI",
                        "interface": {
                            "isBus": true,
                            "requires":[[0,["5v","MOSI"]],[1,["3.3v","MOSI"]]]
                        }
                    },
                    {
                        "name": "MemOverLoad",
                        "interface": {
                            "requires":[[0,["SRAMLoad"]]],
                            "requiresLoad": 930
                        }
                    },
                    {
                        "name": "MISOR",
                        "interface": {
                            "isBus": true,
                            "requires":[[0,["5v","MISO"]],[1,["3.3v","MISO"]]]
                        }
                    },
                    {
                        "name": "supportedControllers",
                        "interface": {
                            "requires":[[0,["ArduinoMega"]],[1,["ArduinoUno"]],[2,["ArduinoMicro"]],[3,["ArduinoProMini5v"]],[5,["ArduinoProMini3v3"]],[6,["NodeMCU"]],[7,["ArduinoLeonardo"]],[8,["ArduinoNano"]],[9,["Arduino101"]],[10,["ESP32DevKitC"]],[11,["ATMega328P"]]]
                        }
                    }
                ]
            }
        }
    ],
    "Coders": [
        {
            "name": "SD",
            "supportedControllers": [
                "ATMega328P",
                "Arduino101",
                "ArduinoLeonardo",
                "ArduinoMega",
                "ArduinoMicro",
                "ArduinoNano",
                "ArduinoProMini3v3",
                "ArduinoProMini5v",
                "ArduinoUno",
                "ESP32DevKitC",
                "NodeMCU"
            ],
            "code": {
                "#": "#     // define SPI CS pin\n#     const int SD_CS_PIN = {{CSnum}};\n",
                "constructors:": "    {{classname}} {{varname}};\n",
                "setup:": "    // Set SPI SS pin to output otherwise the SD library functions will not work.\n    // The SD is set to use SPI SS Arduino pin 10 as chip select(CS) by default.\n    // To change the pin use SD.begin(SD_CS_PIN)\n    pinMode({{CS}}, OUTPUT);\n    // Check if the card is present and can be initialized\n    if (!SD.begin()) {\n        Serial.println(F(\"Card failed, or not present\"));\n        while(1);\n    }\n    Serial.println(F(\"card initialized.\"));\n",
                "snippetCode:": "    // The SD example code creates a datalog.txt file for logging sensor data\n    // open the file. note that only one file can be open at a time,\n    // so you have to close this one before opening another.\n    {{varname}} = SD.open(\"datalog.txt\", FILE_WRITE);\n    // if the file exists in SD card, write sensor data\n    if ({{varname}}) {\n        //Write to file\n        {{varname}}.println(\"ENTER SENSOR DATA HERE\");\n        // close the file\n        {{varname}}.close();\n        // Uncomment to print to the serial port\n        //Serial.println(\"ENTER SENSOR DATA HERE\");\n    } \n    else {\n        // if the file didn't open, print an error\n        Serial.println(F(\"error opening file.\"));\n    }"
            },
            "license": "ArduinoIDE",
            "instantiate": {
                "classname": "File",
                "ports": [
                    "CS"
                ],
                "varname": "sdFile"
            },
            "includeHeaders": [
                "SD.h"
            ]
        }
    ]
}