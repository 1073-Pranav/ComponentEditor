{
    "Parts": [
        {
            "name": "Gyro",
            "symbol": {
                "ref": "circuito_Triple-Axis Digital-Output Gyro Breakout - ITG-3200.svg"
            },
            "displayName": "SparkFun ITG-3200 - Triple-Axis Digital-Output Gyro Breakout",
            "category": [
                "input"
            ],
            "desc": "",
            "bom": [
                {
                    "name": "octopart",
                    "image": "11977.png",
                    "link": "https://octopart.com/sen-11977-sparkfun-66533289",
                    "price": "24.95",
                    "SKU": "1568-1167-ND"
                }
            ],
            "info": {
                "setup": "",
                "test": "Move the sensor to see the values change"
            },
            "headers": [
                7,
                "MaleHeaders"
            ],
            "placing": {
                "onBreadboard": true,
                "row": 0,
                "rotation": 0
            }
        }
    ],
    "Blocks": [
        {
            "name": "Gyro",
            "path": "Gyro",
            "category": "input",
            "blockId": "11977",
            "app": {
                "appName": "SparkFun ITG-3200 - Triple-Axis Digital-Output Gyro Breakout",
                "numericName": "ITG3200",
                "shortName": "Triple-Axis Gyro",
                "tags": [
                    "inputs"
                ],
                "indicators": {
                    "verified": "true",
                    "code": "true",
                    "solder": "true"
                },
                "desc": "<p>Digital breakout board for a triple-axis gyroscope - allowing to measure change in position in 3D.<br><strong>Returned values</strong>: A tilt value between 0 and 65535 on each one of the 3 axes, X, Y and Z.<br><strong>Requires</strong>: soldering of 7 male header pins to fit onto a breadboard. Also, solder together the two pads marked with CLK IN - those pads allow you to connect an external clock, which we assume you don\u2019t really need. (if you do - don\u2019t solder ofcourse :)). This component requires a Logic Level Converter, which will be provided as part of the wiring schematic. Please note that the Logic Level Converter itself also requires the soldering of 12 male header pins (6 X 2) to fit onto the breadboard.</p>\n",
                "visible": false
            },
            "coders": [
                "Gyro"
            ],
            "requires": [
                [
                    0,
                    [
                        "NONE"
                    ]
                ],
                [
                    1,
                    [
                        "LogicLevelConverterI2C-5-3.3"
                    ]
                ]
            ],
            "supportedControllers": [
                "ATMega328P",
                "ArduinoGemma",
                "ArduinoLeonardo",
                "ArduinoMega",
                "ArduinoMicro",
                "ArduinoNano",
                "ArduinoProMini3v3",
                "ArduinoProMini5v",
                "ArduinoUno",
                "ESP32DevKitC",
                "NodeMCU",
                "RPI3B"
            ],
            "circuit": {
                "parts": [
                    {
                        "name": "this",
                        "part": "Gyro"
                    }
                ],
                "ports": [
                    {
                        "name": "VLOGIC",
                        "interface": {
                            "requires":[[0,["3.3v"]]]
                        }
                    },
                    {
                        "name": "VCC",
                        "interface": {
                            "requires":[[0,["3.3v"]]]
                        }
                    },
                    {
                        "name": "SDA",
                        "interface": {
                            "isBus": true,
                            "requires":[[0,["SDA","3.3v"]]]
                        }
                    },
                    {
                        "name": "GND",
                        "interface": {
                            "requires":[[0,["GND"]]]
                        }
                    },
                    {
                        "name": "SCL",
                        "interface": {
                            "isBus": true,
                            "requires":[[0,["SCL","3.3v"]]]
                        }
                    },
                    {
                        "name": "MemOverLoad",
                        "interface": {
                            "requires":[[0,["SRAMLoad"]]],
                            "requiresLoad": 209
                        }
                    },
                    {
                        "name": "supportedControllers",
                        "interface": {
                            "requires":[[0,["ArduinoMega"]],[1,["ArduinoUno"]],[2,["ArduinoMicro"]],[3,["ArduinoProMini5v"]],[5,["ArduinoProMini3v3"]],[6,["NodeMCU"]],[7,["ArduinoLeonardo"]],[8,["ArduinoNano"]],[9,["ArduinoGemma"]],[10,["RPI3B"]],[11,["ESP32DevKitC"]],[12,["ATMega328P"]]]
                        }
                    }
                ]
            }
        }
    ],
    "Coders": [
        {
            "name": "Gyro",
            "supportedControllers": [
                "ATMega328P",
                "ArduinoGemma",
                "ArduinoLeonardo",
                "ArduinoMega",
                "ArduinoMicro",
                "ArduinoNano",
                "ArduinoProMini3v3",
                "ArduinoProMini5v",
                "ArduinoUno",
                "ESP32DevKitC",
                "NodeMCU",
                "RPI3B"
            ],
            "code": {
                "snippetCode:": "    // Get gyro readings in three axes.\n    int {{varname}}X = {{varname}}.getX();\n    int {{varname}}Y = {{varname}}.getY();\n    int {{varname}}Z = {{varname}}.getZ();\n    Serial.print(F(\"X: \")); Serial.print({{varname}}X); \n    Serial.print(F(\"\\tY: \")); Serial.print({{varname}}Y); \n    Serial.print(F(\"\\tZ: \")); Serial.println({{varname}}Z);\n"
            },
            "license": "PublicDomain",
            "instantiate": {
                "classname": "Gyro"
            },
            "files": [
                "lib/*"
            ]
        }
    ]
}